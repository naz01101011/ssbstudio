"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRefractor = _interopRequireDefault(require("react-refractor"));

var _CodeSnippet = _interopRequireDefault(require("./CodeSnippet.css"));

var _reactCopyToClipboard = require("react-copy-to-clipboard");

var _javascript = _interopRequireDefault(require("refractor/lang/javascript"));

var _json = _interopRequireDefault(require("refractor/lang/json"));

var _jsx = _interopRequireDefault(require("refractor/lang/jsx"));

var _bash = _interopRequireDefault(require("refractor/lang/bash"));

var _css = _interopRequireDefault(require("refractor/lang/css"));

var _php = _interopRequireDefault(require("refractor/lang/php"));

var _markdown = _interopRequireDefault(require("refractor/lang/markdown"));

var _csharp = _interopRequireDefault(require("refractor/lang/csharp"));

var _groq = _interopRequireDefault(require("./groq.prism"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Then register them
_reactRefractor.default.registerLanguage(_javascript.default);

_reactRefractor.default.registerLanguage(_json.default);

_reactRefractor.default.registerLanguage(_jsx.default);

_reactRefractor.default.registerLanguage(_php.default);

_reactRefractor.default.registerLanguage(_bash.default);

_reactRefractor.default.registerLanguage(_css.default);

_reactRefractor.default.registerLanguage(_markdown.default);

_reactRefractor.default.registerLanguage(_groq.default);

_reactRefractor.default.registerLanguage(_csharp.default);

function Icon() {
  return /*#__PURE__*/_react.default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    fill: "currentColor",
    stroke: "currentColor",
    strokeWidth: "0",
    viewBox: "0 0 512 512",
    className: _CodeSnippet.default.copyPasteIcon
  }, /*#__PURE__*/_react.default.createElement("path", {
    stroke: "none",
    d: "M405.333 80h-87.35C310.879 52.396 285.821 32 256 32s-54.879 20.396-61.983 48h-87.35C83.198 80 64 99.198 64 122.667v314.665C64 460.801 83.198 480 106.667 480h298.666C428.802 480 448 460.801 448 437.332V122.667C448 99.198 428.802 80 405.333 80zM256 80c11.729 0 21.333 9.599 21.333 21.333s-9.604 21.334-21.333 21.334-21.333-9.6-21.333-21.334S244.271 80 256 80zm152 360H104V120h40v72h224v-72h40v320z"
  }));
}

var CodeSnippet = props => {
  var value = props.value;
  var language = props.language;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isCopied = _useState2[0],
      setIsCopied = _useState2[1];

  function handleCopy() {
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  }

  if (!language) {
    language = 'text';
  }

  if (!value) {
    // eslint-disable-next-line no-console
    console.error('Missing code');
    return /*#__PURE__*/_react.default.createElement("div", null);
  }

  var lines = value.split('\n');
  var linesLength = lines.length;
  var lastLineLength = lines && linesLength && lines[linesLength - 1] ? lines[linesLength - 1].length : value && value.length;
  var longLastLine = lastLineLength > 70;
  var longLastLineMobile = lastLineLength > 25;

  if (language === 'text' || !_reactRefractor.default.hasLanguage(language)) {
    if (language !== 'text') {
      // eslint-disable-next-line no-console
      console.warn('Syntax highlighting for `%s` not found, rendering as plain text', language);
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: _CodeSnippet.default.root,
      "data-long-last-line": longLastLine,
      "data-long-last-line-mobile": longLastLineMobile
    }, /*#__PURE__*/_react.default.createElement("pre", {
      className: _CodeSnippet.default.code
    }, value), /*#__PURE__*/_react.default.createElement(_reactCopyToClipboard.CopyToClipboard, {
      text: props.value,
      onCopy: handleCopy
    }, /*#__PURE__*/_react.default.createElement("button", {
      className: _CodeSnippet.default.copyPasteButton,
      title: "Copy to clipboard"
    }, isCopied ? /*#__PURE__*/_react.default.createElement("span", {
      className: _CodeSnippet.default.copiedCheck
    }, "\u2713") : /*#__PURE__*/_react.default.createElement(Icon, null))));
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _CodeSnippet.default.root,
    "data-long-last-line": longLastLine,
    "data-long-last-line-mobile": longLastLineMobile
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _CodeSnippet.default.code
  }, /*#__PURE__*/_react.default.createElement(_reactRefractor.default, _extends({}, props, {
    language: language
  }))), /*#__PURE__*/_react.default.createElement(_reactCopyToClipboard.CopyToClipboard, {
    text: props.value,
    onCopy: handleCopy
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: _CodeSnippet.default.copyPasteButton,
    title: "Copy to clipboard"
  }, isCopied ? /*#__PURE__*/_react.default.createElement("span", {
    className: _CodeSnippet.default.copiedCheck
  }, "\u2713") : /*#__PURE__*/_react.default.createElement(Icon, null))));
};

CodeSnippet.propTypes = {
  value: _propTypes.default.string.isRequired,
  language: _propTypes.default.string
};
CodeSnippet.defaultProps = {
  language: 'text',
  value: ''
};
var _default = CodeSnippet;
exports.default = _default;