"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _link = _interopRequireDefault(require("next/link"));

var _book = _interopRequireDefault(require("react-icons/lib/fa/book"));

var _HintPage = _interopRequireDefault(require("../HintPage.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable react/prop-types */
var resolveContentType = {
  post: 'blog',
  remoteArticle: 'docs',
  article: 'docs',
  schemaType: 'docs',
  guide: 'guide',
  chapter: 'docs',
  docsOverview: 'docs'
};

var internalLinkSerializer = props => {
  var _props$mark = props.mark,
      mark = _props$mark === void 0 ? {} : _props$mark,
      children = props.children;
  var type = mark.type,
      _mark$slug = mark.slug,
      slug = _mark$slug === void 0 ? {} : _mark$slug;
  var segment = resolveContentType[type];
  var isDocs = resolveContentType[type] === 'docs' || resolveContentType[type] === 'guide';

  if (!type) {
    // eslint-disable-next-line no-console
    console.error("Missing type on internalLink", mark);
    return children;
  }

  var href = segment ? "/".concat(segment, "/").concat(slug.current) : "/".concat(slug.current);
  return /*#__PURE__*/_react.default.createElement("a", {
    href: "https://www.sanity.io".concat(href),
    target: "_blank",
    rel: "noopener"
  }, children);
};

var _default = internalLinkSerializer;
exports.default = _default;