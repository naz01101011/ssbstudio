"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _anchor = _interopRequireDefault(require("part:@sanity/components/buttons/anchor"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _studioHintsConfig = _interopRequireDefault(require("part:@sanity/default-layout/studio-hints-config"));

var _warningIcon = _interopRequireDefault(require("part:@sanity/base/warning-icon"));

var _datastore = require("../datastore");

var _utils = require("./utils");

var _LinksList = _interopRequireDefault(require("./LinksList"));

var _HintsPackage = _interopRequireDefault(require("./HintsPackage.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var removeHintsArticleSlug = 'remove-this-sidebar';

class HintsPackage extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      error: null,
      hintsPackage: null,
      sidebarRemovalInstructions: null,
      isLoading: true
    });

    _defineProperty(this, "subscription", null);
  }

  fetchHintsPackage(repoId) {
    this.fetchSubscription = (0, _datastore.getHints)(repoId, removeHintsArticleSlug).subscribe({
      next: result => {
        var hintsPackage = result.hintsPackage,
            sidebarRemovalInstructions = result.sidebarRemovalInstructions;
        this.setState({
          hintsPackage,
          sidebarRemovalInstructions,
          isLoading: false
        });
      },
      error: _error => {
        this.setState({
          error: _error,
          isLoading: false
        });
      }
    });
  }

  componentDidMount() {
    var repoId = _studioHintsConfig.default.templateRepoId;
    this.fetchHintsPackage(repoId);
  }

  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }

    if (this.fetchSubscription) {
      this.fetchSubscription.unsubscribe();
    }
  }
  /**
   * Hint cards currently only link to external sources.
   * In future iterations a hint card may have it's own page
   * that opens by clicking the card (onCardClick prop), that
   * then renders a page component.
   * These are the handlers for opening and closing hint pages:
   */

  /*
  handleCardClick = id => {
    const locationObject = {type: 'hint', id}
    updateLocation(locationObject)
  }
  handleBackClick = () => {
    updateLocation(null)
  }
  activeHint = () => {
    const {activePage, hintsPackage} = this.state
    return activePage ? hintsPackage.hints.find(hint => hint._id === activePage) : null
  }
  getNextHint = () => {
    const {hints = []} = this.state.hintsPackage
    if (!this.activeHint) {
      return -1
    }
    for (let i = 0; i < hints.length; i++) {
      // if (hints[i]._id === this.activeHint()._id) {
      //   return hints[i + 1]
      // }
    }
    return -1
  }
  */


  renderError(title, message) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(_HintsPackage.default.root, " ").concat(_HintsPackage.default.withError)
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _HintsPackage.default.errorWrapper
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: _HintsPackage.default.errorTitle
    }, /*#__PURE__*/_react.default.createElement(_warningIcon.default, null), title), /*#__PURE__*/_react.default.createElement("p", {
      className: _HintsPackage.default.errorMessage
    }, message)));
  }

  render() {
    var _this$state = this.state,
        hintsPackage = _this$state.hintsPackage,
        sidebarRemovalInstructions = _this$state.sidebarRemovalInstructions,
        error = _this$state.error,
        isLoading = _this$state.isLoading;
    var repoId = _studioHintsConfig.default.templateRepoId;

    if (!repoId) {
      return this.renderError('Configuration missing', /*#__PURE__*/_react.default.createElement("span", null, "The ", /*#__PURE__*/_react.default.createElement("code", null, "studioHintsConfig"), " does not contain a hints package slug."));
    }

    if (isLoading) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _HintsPackage.default.root
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        message: "Loading hints"
      }));
    }

    if (error) {
      return this.renderError('Hints not found', 'An error occurred while fetching the hints.');
    }

    if (!hintsPackage || !hintsPackage.hintsTitle) {
      return this.renderError('Hints not found', "No hints found for slug \"".concat(repoId, "\""));
    }

    var links = hintsPackage.links,
        hints = hintsPackage.hints,
        title = hintsPackage.title,
        hintsTitle = hintsPackage.hintsTitle,
        linksTitle = hintsPackage.linksTitle;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _HintsPackage.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _HintsPackage.default.header
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: _HintsPackage.default.trayTitle
    }, title)), /*#__PURE__*/_react.default.createElement("div", {
      className: _HintsPackage.default.content
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_LinksList.default, {
      title: linksTitle,
      links: links,
      repoId: repoId
    })), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_LinksList.default, {
      type: "card",
      title: hintsTitle,
      links: hints,
      repoId: repoId
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: _HintsPackage.default.footer
    }, sidebarRemovalInstructions && /*#__PURE__*/_react.default.createElement(_anchor.default, {
      color: "primary",
      href: (0, _utils.resolveUrl)(sidebarRemovalInstructions),
      rel: "noopener noreferrer",
      tone: "navbar",
      target: "_blank"
    }, "How to remove this?")));
  }

}

exports.default = HintsPackage;